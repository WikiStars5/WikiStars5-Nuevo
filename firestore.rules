/**
 * @fileOverview Firestore Security Rules for WikiStars5.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (profiles, notifications, streaks, achievements).
 * Public figure data is readable by all, but writable only by admins.
 * Data denormalization is used to ensure authorization independence and efficient rules.
 *
 * Data Structure:
 * - /users/{userId}: User profile information. Owner-only access.
 * - /status/{userId}: User online status. Owner-only access.
 * - /usernames/{username}: Username mapping. Public read, but only the user can claim their username.
 * - /figures/{figureId}: Public figure profiles. Public read, admin-only write.
 * - /figures/{figureId}/comments/{commentId}: Comments on public figures. Authenticated users can create. Owners can edit/delete.
 * - /figures/{figureId}/comments/{commentId}/votes/{userId}: User votes on comments. Only the user can vote.
 * - /figures/{figureId}/attitudeVotes/{userId}: User attitude votes on public figures. Only the user can vote.
 * - /figures/{figureId}/emotionVotes/{userId}: User emotion votes on public figures. Only the user can vote.
 * - /users/{userId}/notifications/{notificationId}: User notifications. Owner-only access.
 * - /users/{userId}/streaks/{streakId}: User streaks. Owner-only access.
 * - /achievements/{achievementId}: Master list of achievements. Public read, admin-only write.
 * - /users/{userId}/user_achievements/{userAchievementId}: User achievements. Owner-only access.
 * - /related_figures/{relatedFigureId}: Relationships between public figures. Public read, admin-only write.
 * - /roles_admin/{userId}: Collection for granting admin roles. Existence of a document grants admin rights.
 * - /goat_battles/{battleId}: Stores the aggregated vote counts for a GOAT battle.
 * - /goat_battles/{battleId}/votes/{userId}: Stores an individual user's vote in a GOAT battle to prevent duplicate voting.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 * - Comments store the `publicFigureId` to allow rules to validate the relationship without needing to query the parent document.
 * - Streaks store the `publicFigureId` for efficient querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document, based on the userId.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the document.
     * @param {string} userId - The user ID to compare against the resource data's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants access to the authenticated user only
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile: request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (read, write) - Authenticated user reads/writes their own profile: request.auth.uid == 'user123' and resource.data.id == 'user123'
     * @deny (create) - Unauthenticated user tries to create a profile
     * @deny (read, write) - Authenticated user tries to read/write someone else's profile: request.auth.uid == 'user456' and resource.data.id == 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Grants access to the authenticated user only for their online status
       * @path /status/{userId}
       * @allow (create) - Authenticated user creates their own status: request.auth.uid == 'user123'
       * @allow (read, write) - Authenticated user reads/writes their own status: request.auth.uid == 'user123' and resource.data.id == 'user123'
       * @deny (create) - Unauthenticated user tries to create a status
       * @deny (read, write) - Authenticated user tries to read/write someone else's status: request.auth.uid == 'user456' and resource.data.id == 'user123'
       * @principle Enforces document ownership for writes.
       */
    match /status/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read usernames, but only the user can claim their username.
     * @path /usernames/{username}
     * @allow (get, list) - Anyone can read/list usernames.
     * @allow (create) - Authenticated user claims a username matching request.resource.data.userId.
     * @deny (create) - Authenticated user tries to claim a username for a different user.
     * @deny (update, delete) - No one can update or delete usernames directly.
     * @principle Enforces ownership of usernames.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read public figure profiles, but only admins can create, update, or delete them.
     * @path /figures/{figureId}
     * @allow (get, list) - Anyone can read/list public figure profiles.
     * @allow (create, update, delete) - Only admins can create, update, or delete public figure profiles.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete public figure profiles.
     * @principle Restricts write access to admins only.
     */
    match /figures/{figureId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows authenticated users to create comments, and owners to update/delete their own comments.
     * @path /figures/{figureId}/comments/{commentId}
     * @allow (get, list) - Anyone can read/list comments for a public figure.
     * @allow (create) - Authenticated user can create a comment.
     * @allow (update, delete) - Only the comment owner can update/delete their comment.
     * @deny (update, delete) - Users cannot update/delete comments they don't own.
     * @principle Enforces comment ownership for updates and deletes.
     */
    match /figures/{figureId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() ;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows a user to vote on a comment only once.
     * @path /figures/{figureId}/comments/{commentId}/votes/{userId}
     * @allow (get) - User can get its own vote
     * @allow (create) - Authenticated user can create a vote.
     * @allow (update) - Authenticated user can update its own vote.
     * @allow (delete) - Authenticated user can delete its own vote.
     * @deny (create, update, delete) - Users cannot create/update/delete votes for other users.
     * @principle Enforces single vote per user.
     */
    match /figures/{figureId}/comments/{commentId}/votes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to vote on attitude only once.
     * @path /figures/{figureId}/attitudeVotes/{userId}
     * @allow (get) - User can get its own vote
     * @allow (create) - Authenticated user can create a vote.
     * @allow (update) - Authenticated user can update its own vote.
     * @allow (delete) - Authenticated user can delete its own vote.
     * @deny (create, update, delete) - Users cannot create/update/delete votes for other users.
     * @principle Enforces single vote per user.
     */
    match /figures/{figureId}/attitudeVotes/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to vote on emotion only once.
     * @path /figures/{figureId}/emotionVotes/{userId}
     * @allow (get) - User can get its own vote
     * @allow (create) - Authenticated user can create a vote.
     * @allow (update) - Authenticated user can update its own vote.
     * @allow (delete) - Authenticated user can delete its own vote.
     * @deny (create, update, delete) - Users cannot create/update/delete votes for other users.
     * @principle Enforces single vote per user.
     */
    match /figures/{figureId}/emotionVotes/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to the authenticated user only for their notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) - Authenticated user creates their own notification: request.auth.uid == 'user123'
     * @allow (read, write) - Authenticated user reads/writes their own notification: request.auth.uid == 'user123' and resource.data.userId == 'user123'
     * @deny (create) - Unauthenticated user tries to create a notification.
     * @deny (read, write) - Authenticated user tries to read/write someone else's notification: request.auth.uid == 'user456' and resource.data.userId == 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to the authenticated user only for their streaks.
     * @path /users/{userId}/streaks/{streakId}
     * @allow (create) - Authenticated user creates their own streak: request.auth.uid == 'user123'
     * @allow (read, write) - Authenticated user reads/writes their own streak: request.auth.uid == 'user123' and resource.data.userId == 'user123'
     * @deny (create) - Unauthenticated user tries to create a streak.
     * @deny (read, write) - Authenticated user tries to read/write someone else's streak: request.auth.uid == 'user456' and resource.data.userId == 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/streaks/{streakId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read achievements, but only admins can create, update, or delete them.
     * @path /achievements/{achievementId}
     * @allow (get, list) - Anyone can read/list achievements.
     * @allow (create, update, delete) - Only admins can create, update, or delete achievements.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete achievements.
     * @principle Restricts write access to admins only.
     */
    match /achievements/{achievementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows access to the authenticated user only for their user achievements.
     * @path /users/{userId}/user_achievements/{userAchievementId}
     * @allow (create) - Authenticated user creates their own user achievement: request.auth.uid == 'user123'
     * @allow (read, write) - Authenticated user reads/writes their own user achievement: request.auth.uid == 'user123' and resource.data.userId == 'user123'
     * @deny (create) - Unauthenticated user tries to create a user achievement.
     * @deny (read, write) - Authenticated user tries to read/write someone else's user achievement: request.auth.uid == 'user456' and resource.data.userId == 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/user_achievements/{userAchievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read related figures, but only admins can create, update, or delete them.
     * @path /related_figures/{relatedFigureId}
     * @allow (get, list) - Anyone can read/list related figures.
     * @allow (create, update, delete) - Only admins can create, update, or delete related figures.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete related figures.
     * @principle Restricts write access to admins only.
     */
    match /related_figures/{relatedFigureId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

      /**
       * @description Admin role management. Existence of a document grants admin rights.
       * @path /roles_admin/{userId}
       * @allow get: if isAdmin();
       * @allow list: if false; // Listing admin roles is not allowed.
       * @allow create: if isAdmin(); // Only admins can grant admin roles.
       * @allow update: if false; // Admin role updates are not allowed (delete and recreate).
       * @allow delete: if isAdmin(); // Only admins can revoke admin roles.
       * @principle Restricts admin role management to existing admins.
       */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }

      /**
       * @description Allows anyone to read vote counts for a GOAT battle, but only admins can create/update the battle.
       * @path /goat_battles/{battleId}
       * @allow get: if true;
       * @allow list: if true;
       * @allow create: if isAdmin();
       * @allow update: if isAdmin() && resource != null;
       * @allow delete: if isAdmin() && resource != null;
       * @principle Restricts write access to admins for GOAT battles.
       */
    match /goat_battles/{battleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

      /**
       * @description Allows a user to vote in a GOAT battle only once.
       * @path /goat_battles/{battleId}/votes/{userId}
       * @allow get: if isOwner(userId);
       * @allow list: if false;
       * @allow create: if isOwner(userId);
       * @allow update: if isExistingOwner(userId);
       * @allow delete: if isExistingOwner(userId);
       * @principle Enforces single vote per user in a GOAT battle.
       */
    match /goat_battles/{battleId}/votes/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}