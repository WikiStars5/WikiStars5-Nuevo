/**
 * @file Firestore Security Rules for WikiStars5
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data, combined with role-based access control for administrative functions.
 * Public figure data is publicly readable, but write access is restricted to administrators.
 * Data required for authorization is denormalized onto the documents themselves whenever possible to avoid costly `get()` calls and ensure security rule efficiency.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the user themselves can read/write their own profile.
 * - /figures/{figureId}: Stores public figure profiles. Publicly readable, writeable only by admins.
 * - /figures/{figureId}/comments/{commentId}: Stores comments for each public figure.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for each user. Only the user can access their notifications.
 * - /users/{userId}/streaks/{streakId}: Stores streak data for users.
 * - /achievements/{achievementId}: Stores a master list of all achievements.
 * - /users/{userId}/user_achievements/{userAchievementId}: Stores the achievements unlocked by a user.
 * - /related_figures/{relatedFigureId}: Stores relationships between public figures.
 * - /roles_admin/{userId}: Presence of a document grants admin rights to the user.
 *
 * Key Security Decisions:
 * - User data is strictly protected via path-based ownership.
 * - Public figures are publicly readable, but only admins can create, update, or delete them.
 * - Listing of all users is disallowed.
 * - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 * - Comments: Each comment document has a `publicFigureId` field, denormalizing the parent document ID for authorization independence.
 * - Streaks: Each streak document has a `publicFigureId` field, denormalizing the related figure for efficient authorization and querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to manage their own profile.
     * @path /users/{userId}
     * @allow (create) User A can create their own profile with matching userId.
     * @allow (get) User A can read their own profile.
     * @allow (update) User A can update their own profile.
     * @allow (delete) User A can delete their own profile.
     * @deny (create) User A cannot create a profile for User B.
     * @deny (get) User A cannot read User B's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read public figure profiles, but only admins can write.
     * @path /figures/{figureId}
     * @allow (get) Any user can read a public figure's profile.
     * @allow (list) Any user can list public figures.
     * @allow (create) An admin can create a public figure profile.
     * @deny (create) A non-admin cannot create a public figure profile.
     * @principle Allows public read access with restricted write access.
     */
    match /figures/{figureId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows reading and writing comments for a specific public figure.
     * @path /figures/{figureId}/comments/{commentId}
     * @allow (create) Any signed-in user can create a comment.
     * @allow (get) Any user can read a comment.
     * @allow (list) Any user can list comments for a figure.
     * @allow (update) A user can update their own comment.
     * @allow (delete) A user can delete their own comment.
     * @deny (create) An anonymous user cannot create a comment.
     * @principle Allows public read access with owner-based write access, public list
     */
    match /figures/{figureId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCommentOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      function isExistingCommentOwner() {
        return isCommentOwner() && exists(resource);
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingCommentOwner();
      allow delete: if isExistingCommentOwner();
    }

    /**
     * @description Allows a user to manage their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User A can create their own notification with matching userId.
     * @allow (get) User A can read their own notification.
     * @allow (list) User A can list their own notifications.
     * @allow (update) User A can update their own notification.
     * @allow (delete) User A can delete their own notification.
     * @deny (create) User A cannot create a notification for User B.
     * @deny (get) User A cannot read User B's notification.
     * @principle Enforces document ownership for user notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own streaks.
     * @path /users/{userId}/streaks/{streakId}
     * @allow (create) User A can create their own streak with matching userId.
     * @allow (get) User A can read their own streak.
     * @allow (list) User A can list their own streaks.
     * @allow (update) User A can update their own streak.
     * @allow (delete) User A can delete their own streak.
     * @deny (create) User A cannot create a streak for User B.
     * @deny (get) User A cannot read User B's streak.
     * @principle Enforces document ownership for user streaks.
     */
    match /users/{userId}/streaks/{streakId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read achievements, but no one to write (except via backend functions).
     * @path /achievements/{achievementId}
     * @allow (get) Any user can read an achievement.
     * @allow (list) Any user can list achievements.
     * @deny (create) No one can create an achievement via client-side rules.
     * @principle Allows public read access with restricted write access.
     */
    match /achievements/{achievementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own user achievements.
     * @path /users/{userId}/user_achievements/{userAchievementId}
     * @allow (create) User A can create their own user achievement with matching userId.
     * @allow (get) User A can read their own user achievement.
     * @allow (list) User A can list their own user achievements.
     * @allow (update) User A can update their own user achievement.
     * @allow (delete) User A can delete their own user achievement.
     * @deny (create) User A cannot create a user achievement for User B.
     * @deny (get) User A cannot read User B's user achievement.
     * @principle Enforces document ownership for user achievements.
     */
    match /users/{userId}/user_achievements/{userAchievementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read related figures, but no one to write (except via backend functions).
     * @path /related_figures/{relatedFigureId}
     * @allow (get) Any user can read a related figure.
     * @allow (list) Any user can list related figures.
     * @deny (create) No one can create a related figure via client-side rules.
     * @principle Allows public read access with restricted write access.
     */
    match /related_figures/{relatedFigureId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to be identified via document existence.
     * @path /roles_admin/{userId}
     * @allow (create) This should be done via backend, not the client.
     * @allow (get) This should be done via backend, not the client.
     * @allow (update) This should be done via backend, not the client.
     * @allow (delete) This should be done via backend, not the client.
     * @principle Existence-based admin role check.
     */
    match /roles_admin/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}