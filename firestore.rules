/**
 * @fileoverview Firestore Security Rules for WikiStars5.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data,
 * while allowing public read access to public figure information.
 * Administrative privileges are granted based on the existence of a document
 * in the /roles_admin/{userId} collection. All write operations are carefully
 * controlled based on user authentication and ownership.
 *
 * Data Structure:
 * - /users/{userId}: User profile information. Owner-only access.
 * - /status/{userId}: User status information. Owner-only access.
 * - /usernames/{username}: Username-to-userId mapping for uniqueness. Public read, restricted write.
 * - /figures/{figureId}: Public figure profiles. Public read, admin-only write.
 * - /figures/{figureId}/comments/{commentId}: Comments on public figures. Authenticated users can create.
 * - /figures/{figureId}/comments/{commentId}/votes/{userId}: User votes on comments. Prevents duplicate votes.
 * - /figures/{figureId}/attitudeVotes/{userId}: User attitude votes. Prevents duplicate votes.
 * - /figures/{figureId}/emotionVotes/{userId}: User emotion votes. Prevents duplicate votes.
 * - /users/{userId}/notifications/{notificationId}: User notifications. Owner-only access.
 * - /users/{userId}/streaks/{streakId}: User streaks. Owner-only access.
 * - /achievements/{achievementId}: Global achievement definitions. Public read, admin-only write.
 * - /users/{userId}/user_achievements/{userAchievementId}: User-specific achievements. Owner-only access.
 * - /related_figures/{relatedFigureId}: Relationships between public figures. Public read, admin-only write.
 * - /roles_admin/{userId}: Admin role assignments. Restricted write.
 * - /goat_battles/{battleId}: Stores the total vote counts for a GOAT battle. Public read.
 * - /goat_battles/{battleId}/votes/{userId}: Stores an individual user's vote in a GOAT battle.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data type validation is relaxed to allow for rapid prototyping.
 * - Admin privileges are determined by the presence of a document in `/roles_admin/{userId}`.
 * - Public read access is granted to the `/figures` and `/achievements` collections.
 *
 * Denormalization for Authorization:
 * - The `publicFigureId` is denormalized into the `Comment` document to allow for
 *   direct authorization without needing to query the parent `PublicFigure`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user has admin privileges.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Defines read/write rules for user documents.
     * @path /users/{userId}
     * @allow (read) Authenticated user with matching {userId}.
     * @allow (create) Authenticated user creating their own document (userId in path matches auth.uid).
     * @deny (create) Unauthenticated user attempting to create a user document.
     * @deny (update) Authenticated user attempting to update a different user's document.
     * @deny (delete) Any user attempting to delete another user's document.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines read/write rules for user status documents.
     * @path /status/{userId}
     * @allow (read) Authenticated user with matching {userId}.
     * @allow (create) Authenticated user creating their own document (userId in path matches auth.uid).
     * @deny (create) Unauthenticated user attempting to create a user document.
     * @deny (update) Authenticated user attempting to update a different user's document.
     * @deny (delete) Any user attempting to delete another user's document.
     * @principle Enforces document ownership for reads and writes.
     */
    match /status/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines read/write rules for usernames.
     * @path /usernames/{username}
     * @allow (read) Any user can check for username availability.
     * @allow (create) Authenticated user creating a username entry, verifying the userId.
     * @deny (update) No updates allowed.
     * @deny (delete) Only admins can delete.
     * @principle Enforces uniqueness for usernames.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Defines read/write rules for public figure profiles.
     * @path /figures/{figureId}
     * @allow (read) Any user can read public figure profiles.
     * @allow (create) Only admins can create public figure profiles.
     * @allow (update) Only admins can update public figure profiles.
     * @allow (delete) Only admins can delete public figure profiles.
     * @principle Restricts write access to admins, allows public read access.
     */
    match /figures/{figureId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines read/write rules for comments on public figures.
     * @path /figures/{figureId}/comments/{commentId}
     * @allow (read) Any user can read comments.
     * @allow (create) Authenticated users can create comments.
     * @deny (update) Only the owner can update the comment.
     * @deny (delete) Only the owner can delete the comment.
     * @principle Allows authenticated users to comment, but restricts modification.
     */
    match /figures/{figureId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
    }

    /**
     * @description Defines read/write rules for comment votes.
     * @path /figures/{figureId}/comments/{commentId}/votes/{userId}
     * @allow (read) Any user can read comment votes.
     * @allow (create) Authenticated user can vote.  The userId in the path must match auth.uid.
     * @deny (update) No updates allowed.
     * @deny (delete) Users can delete their vote
     * @principle Prevents duplicate voting.
     */
    match /figures/{figureId}/comments/{commentId}/votes/{userId} {
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && userId == request.auth.uid;
      allow update: if false;
      allow delete: if isSignedIn() && userId == request.auth.uid && resource != null;
    }

        /**
     * @description Defines read/write rules for attitude votes.
     * @path /figures/{figureId}/attitudeVotes/{userId}
     * @allow (read) Any user can read comment votes.
     * @allow (create) Authenticated user can vote.  The userId in the path must match auth.uid.
     * @deny (update) No updates allowed.
     * @deny (delete) Users can delete their vote
     * @principle Prevents duplicate voting.
     */
    match /figures/{figureId}/attitudeVotes/{userId} {
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && userId == request.auth.uid;
      allow update: if false;
      allow delete: if isSignedIn() && userId == request.auth.uid && resource != null;
    }

        /**
     * @description Defines read/write rules for emotion votes.
     * @path /figures/{figureId}/emotionVotes/{userId}
     * @allow (read) Any user can read comment votes.
     * @allow (create) Authenticated user can vote.  The userId in the path must match auth.uid.
     * @deny (update) No updates allowed.
     * @deny (delete) Users can delete their vote
     * @principle Prevents duplicate voting.
     */
    match /figures/{figureId}/emotionVotes/{userId} {
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && userId == request.auth.uid;
      allow update: if false;
      allow delete: if isSignedIn() && userId == request.auth.uid && resource != null;
    }

    /**
     * @description Defines read/write rules for notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (read) Owner-only access.
     * @allow (create) Owner-only access.
     * @deny (update) No updates allowed.
     * @deny (delete) Owner-only access.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines read/write rules for streaks.
     * @path /users/{userId}/streaks/{streakId}
     * @allow (read) Owner-only access.
     * @allow (create) Owner-only access.
     * @deny (update) Owner-only access.
     * @deny (delete) Owner-only access.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/streaks/{streakId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines read/write rules for achievements.
     * @path /achievements/{achievementId}
     * @allow (read) Public read access.
     * @allow (create) Admin-only access.
     * @allow (update) Admin-only access.
     * @allow (delete) Admin-only access.
     */
    match /achievements/{achievementId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines read/write rules for user achievements.
     * @path /users/{userId}/user_achievements/{userAchievementId}
     * @allow (read) Owner-only access.
     * @allow (create) Owner-only access.
     * @deny (update) No updates allowed.
     * @deny (delete) Owner-only access.
     */
    match /users/{userId}/user_achievements/{userAchievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines read/write rules for related figures.
     * @path /related_figures/{relatedFigureId}
     * @allow (read) Public read access.
     * @allow (create) Admin-only access.
     * @allow (update) Admin-only access.
     * @allow (delete) Admin-only access.
     */
    match /related_figures/{relatedFigureId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines read/write rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (read) No direct reads allowed.  Admin status is checked via `exists()` in other rules.
     * @allow (create) Only admins can grant admin roles.
     * @deny (update) No updates allowed.
     * @allow (delete) Only admins can revoke admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if false;
      allow list: if false;

      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
    
        /**
     * @description Defines read/write rules for the GOAT battles document.
     * @path /goat_battles/{battleId}
     * @allow (read) Any user can read the vote counts.
     * @deny (create) No one can create new battles via client-side code.
     * @deny (update) No one can directly update the battle document via client-side code.
     * @deny (delete) No one can delete the battle document via client-side code.
     */
    match /goat_battles/{battleId} {
        allow get: if true;
        allow list: if true; 

        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Defines read/write rules for individual user votes in a GOAT battle.
     * @path /goat_battles/{battleId}/votes/{userId}
     * @allow (read) Any user can read another user's vote.
     * @allow (create) Authenticated user can vote; userId in path must match auth.uid.
     * @deny (update) Votes cannot be changed.
     * @deny (delete) Users can delete their vote.
     */
    match /goat_battles/{battleId}/votes/{userId} {
        allow get: if true;
        allow list: if false;

        allow create: if isSignedIn() && userId == request.auth.uid;
        allow update: if false;
        allow delete: if isSignedIn() && userId == request.auth.uid && resource != null;
    }
  }
}