/**
 * @fileoverview Firestore Security Rules for WikiStars5.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data
 * while allowing public read access to public figure information.  Admin
 * privileges are granted based on the existence of a document in the
 * /roles_admin collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data.  Access is restricted
 *   to the user themselves.
 * - /status/{userId}: Stores user online status. Access is restricted to the user themselves.
 * - /usernames/{username}: Stores a mapping of usernames to user IDs to
 *   enforce uniqueness.
 * - /figures/{figureId}: Stores public figure profiles.  Read access is
 *   public, write access is restricted to admins.
 * - /figures/{figureId}/comments/{commentId}: Stores comments on public
 *   figures.
 * - /figures/{figureId}/comments/{commentId}/votes/{userId}: Stores votes on comments.
 * - /figures/{figureId}/attitudeVotes/{userId}: Stores attitude votes.
 * - /figures/{figureId}/emotionVotes/{userId}: Stores emotion votes.
 * - /users/{userId}/notifications/{notificationId}: Stores private user
 *   notifications.  Access is restricted to the user themselves.
 * - /users/{userId}/streaks/{streakId}: Stores user streaks.  Access is
 *   restricted to the user themselves.
 * - /achievements/{achievementId}: Stores the master list of achievements.
 * - /users/{userId}/user_achievements/{userAchievementId}: Stores the
 *   achievements a user has unlocked.  Access is restricted to the user
 *   themselves.
 * - /related_figures/{relatedFigureId}: Stores relationships between public
 *   figures.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges to
 *   the user.
 * - /goat_battles/{battleId}: Stores aggregated vote counts for GOAT battles.
 * - /goat_battles/{battleId}/votes/{userId}: Stores individual user votes for GOAT battles.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 * - Comments denormalize the `publicFigureId` to allow authorization checks
 *   without needing to traverse the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user owns the existing document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (get, update, delete) Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for /status/{userId} documents.
     * @path /status/{userId}
     * @allow (create) Authenticated user can create their own status.
     * @allow (get, update, delete) Authenticated user can access their own status.
     * @deny (create) Unauthenticated user cannot create a status.
     * @deny (get, update, delete) Authenticated user cannot access another user's status.
     * @principle Enforces document ownership for writes.
     */
    match /status/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for /usernames/{username} documents.
     * @path /usernames/{username}
     * @allow (get) Anyone can check if a username is available.
     * @allow (create) Authenticated user can claim a username, if it matches the userId.
     * @deny (list, update, delete) Listing, updating, or deleting usernames is not allowed.
     * @principle Enforces unique usernames and restricts write access.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for /figures/{figureId} documents.
     * @path /figures/{figureId}
     * @allow (get, list) Anyone can read public figure profiles.
     * @allow (create, update, delete) Only admins can create, update, or delete public figure profiles.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /figures/{figureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for /figures/{figureId}/comments/{commentId} documents.
     * @path /figures/{figureId}/comments/{commentId}
     * @allow (get, list) Any user can read comments for a public figure.
     * @allow (create) Any authenticated user can create a comment.
     * @allow (update, delete) Only the comment owner can update or delete their comment.
     * @deny (update, delete) Non-owners cannot modify comments.
     * @principle Enforces comment ownership for updates and deletes.
     */
    match /figures/{figureId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
    }

    /**
     * @description Security rules for /figures/{figureId}/comments/{commentId}/votes/{userId} documents.
     * @path /figures/{figureId}/comments/{commentId}/votes/{userId}
     * @allow (get) Any user can get a specific vote.
     * @allow (create) Only the authenticated user can vote (create).
     * @allow (update) Only the authenticated user can update their existing vote.
     * @deny (list, delete) Listing and deleting votes is not allowed.
     * @principle Only users can vote.
     */
    match /figures/{figureId}/comments/{commentId}/votes/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId && resource != null;
      allow delete: if false;
    }

    /**
     * @description Security rules for /figures/{figureId}/attitudeVotes/{userId} documents.
     * @path /figures/{figureId}/attitudeVotes/{userId}
     * @allow (get) Any user can get a specific vote.
     * @allow (create) Only the authenticated user can vote (create).
     * @allow (update) Only the authenticated user can update their existing vote.
     * @deny (list, delete) Listing and deleting votes is not allowed.
     * @principle Only users can vote.
     */
    match /figures/{figureId}/attitudeVotes/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId && resource != null;
      allow delete: if false;
    }

        /**
     * @description Security rules for /figures/{figureId}/emotionVotes/{userId} documents.
     * @path /figures/{figureId}/emotionVotes/{userId}
     * @allow (get) Any user can get a specific vote.
     * @allow (create) Only the authenticated user can vote (create).
     * @allow (update) Only the authenticated user can update their existing vote.
     * @deny (list, delete) Listing and deleting votes is not allowed.
     * @principle Only users can vote.
     */
    match /figures/{figureId}/emotionVotes/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId && resource != null;
      allow delete: if false;
    }


    /**
     * @description Security rules for /users/{userId}/notifications/{notificationId} documents.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, list) Authenticated user can access their own notifications.
     * @allow (create) Authenticated user can create their own notification.
     * @deny (get, list, create, update, delete) Authenticated user cannot access another user's notifications.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for /users/{userId}/streaks/{streakId} documents.
     * @path /users/{userId}/streaks/{streakId}
     * @allow (get, list) Authenticated user can access their own streaks.
     * @allow (create) Authenticated user can create their own streak.
     * @deny (get, list, create, update, delete) Authenticated user cannot access another user's streaks.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/streaks/{streakId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for /achievements/{achievementId} documents.
     * @path /achievements/{achievementId}
     * @allow (get, list) Anyone can read the list of available achievements.
     * @deny (create, update, delete) Only admins can create, update, or delete achievements.
     * @principle Restricts write access to admins.
     */
    match /achievements/{achievementId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for /users/{userId}/user_achievements/{userAchievementId} documents.
     * @path /users/{userId}/user_achievements/{userAchievementId}
     * @allow (get, list) Authenticated user can access their own user achievements.
     * @allow (create) Authenticated user can create their own user achievement.
     * @deny (get, list, create, update, delete) Authenticated user cannot access another user's user achievements.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/user_achievements/{userAchievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for /related_figures/{relatedFigureId} documents.
     * @path /related_figures/{relatedFigureId}
     * @allow (get, list) Anyone can read the relationships between public figures.
     * @deny (create, update, delete) Only admins can create, update, or delete related figures.
     * @principle Restricts write access to admins.
     */
    match /related_figures/{relatedFigureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rules for granting admin role via document existence.
      * @path /roles_admin/{userId}
      * @allow get: if isAdmin();
      * @allow list: if false;
      * @allow create: if false; // Prevent client-side creation of admin roles.
      * @allow update: if false; // Prevent client-side updating of admin roles.
      * @allow delete: if false; // Prevent client-side deletion of admin roles.
      * @principle Admin role is managed server-side only.
      */
     match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
     }

        /**
     * @description Security rules for the goat_battles collection.
     * @path /goat_battles/{battleId}
     * @allow get, list: if true
     * @allow create, update, delete: if false
     * @principle The rules allow public access to view vote counts
     */
    match /goat_battles/{battleId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

        /**
     * @description Security rules for individual votes within a goat_battle
     * @path /goat_battles/{battleId}/votes/{userId}
     * @allow get: if true
     * @allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId
     * @allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId && resource != null;
     * @allow list, delete: if false
     * @principle Votes can only be created and updated by their owner (the voter)
     */
    match /goat_battles/{battleId}/votes/{userId} {
        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
        allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId && resource != null;
        allow delete: if false;
    }
  }
}