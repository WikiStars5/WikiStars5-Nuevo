/**
 * @file Firestore Security Rules for WikiStars5
 * @version Prototyping
 *
 * @Core Philosophy:
 * This ruleset prioritizes secure access control based on user ownership and administrative roles.
 * It allows for rapid prototyping by focusing on authorization rather than strict data validation.
 *
 * @Data Structure:
 * - User data is nested under `/users/{userId}`.
 * - Public figure data is stored in `/figures/{figureId}`.
 * - Comments are stored in `/figures/{figureId}/comments/{commentId}`.
 * - Notifications are stored in `/users/{userId}/notifications/{notificationId}`.
 * - Streaks are stored in `/users/{userId}/streaks/{streakId}`.
 * - Achievements are stored in `/achievements/{achievementId}`.
 * - User Achievements are stored in `/users/{userId}/user_achievements/{userAchievementId}`.
 * - Related Figures relationships are stored in `/related_figures/{relatedFigureId}`.
 * - Admin roles are determined by the presence of a document in `/roles_admin/{userId}`.
 *
 * @Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public figure profiles are publicly readable but only admins can modify them.
 * - All write operations are strictly controlled based on ownership or admin privileges.
 *
 * @Denormalization for Authorization:
 * - Comments denormalize `publicFigureId` to allow rules to be evaluated without `get()` calls.
 * - Streaks denormalize `publicFigureId` to allow rules to be evaluated without `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document (authenticated, owns the doc, and doc exists).
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence
     *              of a document in the /roles_admin/{userId} collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Only the user themselves can access/modify their profile.
     * @deny (create) - If the user tries to create a profile with a different ID.
     * @deny (get, update, delete) - If a different user tries to access/modify this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /figures/{figureId} collection.
     * @path /figures/{figureId}
     * @allow (get, list) - Anyone can read the public figure profiles.
     * @allow (create, update, delete) - Only admins can create, update, or delete public figure profiles.
     * @deny (create, update, delete) - Non-admins cannot modify public figure profiles.
     * @principle Public read access with admin-only writes for public figure profiles.
     */
    match /figures/{figureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /figures/{figureId}/comments/{commentId} collection.
     * @path /figures/{figureId}/comments/{commentId}
     * @allow (get, list) - Anyone can read the comments for a public figure.
     * @allow (create) - Any signed-in user can create a comment.
     * @allow (update, delete) - Only the comment's author can update or delete it.
     * @deny (update, delete) - If a non-author tries to update or delete a comment.
     * @principle Allows public reads, user-created comments, and ownership-based updates/deletes.
     */
    match /figures/{figureId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for /users/{userId}/notifications/{notificationId} collection.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get) - Only the user can read their own notifications.
     * @allow (list) - Only the user can list their own notifications.
     * @allow (create) - Only the user can create their own notifications.
     * @allow (update, delete) - Only the user can update or delete their own notifications.
     * @deny (get, list, create, update, delete) - Other users cannot access these notifications.
     * @principle Enforces user ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/streaks/{streakId} collection.
     * @path /users/{userId}/streaks/{streakId}
     * @allow (get) - Only the user can read their own streaks.
     * @allow (list) - Only the user can list their own streaks.
     * @allow (create) - Only the user can create their own streaks.
     * @allow (update, delete) - Only the user can update or delete their own streaks.
     * @deny (get, list, create, update, delete) - Other users cannot access these streaks.
     * @principle Enforces user ownership for streaks.
     */
    match /users/{userId}/streaks/{streakId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /achievements/{achievementId} collection.
     * @path /achievements/{achievementId}
     * @allow (get, list) - Anyone can read the list of available achievements.
     * @allow (create, update, delete) - Only admins can create, update, or delete achievements.
     * @deny (create, update, delete) - Non-admins cannot modify the list of achievements.
     * @principle Allows public reads, admin-only writes for achievements.
     */
    match /achievements/{achievementId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /users/{userId}/user_achievements/{userAchievementId} collection.
     * @path /users/{userId}/user_achievements/{userAchievementId}
     * @allow (get) - Only the user can read their own user achievements.
     * @allow (list) - Only the user can list their own user achievements.
     * @allow (create) - Only the user can create their own user achievements.
     * @allow (update, delete) - Only the user can update or delete their own user achievements.
     * @deny (get, list, create, update, delete) - Other users cannot access these user achievements.
     * @principle Enforces user ownership for user achievements.
     */
    match /users/{userId}/user_achievements/{userAchievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /related_figures/{relatedFigureId} collection.
     * @path /related_figures/{relatedFigureId}
     * @allow (get, list) - Anyone can read the relationships between related figures.
     * @allow (create, update, delete) - Only admins can create, update, or delete related figure relationships.
     * @deny (create, update, delete) - Non-admins cannot modify the related figure relationships.
     * @principle Allows public reads, admin-only writes for related figures.
     */
    match /related_figures/{relatedFigureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /roles_admin/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}