/**
 * @file Firestore Security Rules for WikiStars5
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and an admin-controlled model for global data.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user or an admin.
 * - /figures/{figureId}: Public figure profiles, publicly readable, writable only by admins.
 * - /figures/{figureId}/comments/{commentId}: Comments on public figures, any signed-in user can create.
 * - /users/{userId}/notifications/{notificationId}: User notifications, accessible only by the user or an admin.
 * - /users/{userId}/streaks/{streakId}: User comment streaks, accessible only by the user or an admin.
 * - /achievements/{achievementId}: Global achievement definitions, publicly readable, writable only by admins.
 * - /users/{userId}/user_achievements/{userAchievementId}: User-specific unlocked achievements, accessible only by the user or an admin.
 * - /related_figures/{relatedFigureId}: Relationships between public figures, writable only by admins.
 * - /roles_admin/{userId}: Admin role assignment, checked by document existence.
 *
 * Key Security Decisions:
 * - Users can only read/write their own data under /users/{userId}.
 * - Public figure data is publicly readable, but only admins can modify it.
 * - Listing of users is not allowed.
 * - Admin privileges are granted by the existence of a document in /roles_admin/{userId}.
 *
 * Denormalization for Authorization:
 * - Comments include a `publicFigureId` field to simplify authorization checks.
 * - Streaks include a `publicFigureId` field to simplify authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user exists and is the owner of the resource.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in the /roles_admin collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /******************* USERS *******************/

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User 'wikibot1.000@gmail.com' (qJxeWyYIMOT3UzMJwYnI0bCxogy1) can create their own profile.
     * @allow (get, update, delete) User 'wikibot1.000@gmail.com' (qJxeWyYIMOT3UzMJwYnI0bCxogy1) can read, update, and delete their own profile. Admin can read, update, and delete any user profile.
     * @deny (create) User 'attacker@example.com' attempts to create a profile for 'qJxeWyYIMOT3UzMJwYnI0bCxogy1'.
     * @deny (get, update, delete) User 'attacker@example.com' attempts to read, update, or delete user profile 'qJxeWyYIMOT3UzMJwYnI0bCxogy1'.
     * @principle Enforces document ownership for writes and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /******************* PUBLIC FIGURES *******************/

    /**
     * @description Manages public figure profiles.
     * @path /figures/{figureId}
     * @allow (get, list) Any user can read the public figure profile.
     * @allow (create, update, delete) Only admins can create, update, or delete public figure profiles.
     * @deny (create, update, delete) Non-admin users cannot modify public figure profiles.
     * @principle Restricts write access to admins for public figure management.
     */
    match /figures/{figureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /******************* COMMENTS *******************/

    /**
     * @description Manages comments associated with a specific public figure.
     * @path /figures/{figureId}/comments/{commentId}
     * @allow (get, list) Any user can read comments.
     * @allow (create) Any signed-in user can create comments. Requires the 'publicFigureId' to match the parent document.
     * @allow (update, delete) No update or delete allowed for comments.
     * @deny (create) Unauthenticated users can not create comments.
     * @principle Allows public read access for comments and signed-in user creation.
     */
    match /figures/{figureId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.publicFigureId == figureId;
      allow update: if false;
      allow delete: if false;
    }

    /******************* NOTIFICATIONS *******************/

    /**
     * @description Manages notifications for a specific user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, list) The user or an admin can read their own notifications.
     * @allow (create) The user can create their own notification.
     * @allow (update, delete) The user or an admin can update/delete their own notifications.
     * @deny (get, list, create, update, delete) Other users cannot access or modify another user's notifications.
     * @principle Enforces document ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /******************* STREAKS *******************/

    /**
     * @description Manages streak data for a user.
     * @path /users/{userId}/streaks/{streakId}
     * @allow (get, list) The user or an admin can read their own streak data.
     * @allow (create) The user can create their own streak.
     * @allow (update, delete) The user or an admin can update/delete their own streak data.
     * @deny (get, list, create, update, delete) Other users cannot access or modify another user's streak data.
     * @principle Enforces document ownership for streaks.
     */
    match /users/{userId}/streaks/{streakId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /******************* ACHIEVEMENTS *******************/

    /**
     * @description Manages the master list of achievements.
     * @path /achievements/{achievementId}
     * @allow (get, list) Any user can read the list of achievements.
     * @allow (create, update, delete) Only admins can manage achievements.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete achievements.
     * @principle Restricts write access to admins for achievement management.
     */
    match /achievements/{achievementId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /******************* USER ACHIEVEMENTS *******************/

    /**
     * @description Manages the association between a user and an achievement.
     * @path /users/{userId}/user_achievements/{userAchievementId}
     * @allow (get, list) The user or an admin can read their own user achievements.
     * @allow (create) The user can create their own user achievement.
     * @allow (update, delete) The user or an admin can update/delete their own user achievements.
     * @deny (get, list, create, update, delete) Other users cannot access or modify another user's achievements.
     * @principle Enforces document ownership for user achievements.
     */
    match /users/{userId}/user_achievements/{userAchievementId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /******************* RELATED FIGURES *******************/

    /**
     * @description Manages relationships between public figures.
     * @path /related_figures/{relatedFigureId}
     * @allow (get, list) Any user can read the relationships between public figures.
     * @allow (create, update, delete) Only admins can manage these relationships.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete related figures.
     * @principle Restricts write access to admins for related figures management.
     */
    match /related_figures/{relatedFigureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /******************* ADMIN ROLES *******************/

    /**
     * @description Manages admin roles. Existence of a document in this collection grants admin rights.
     * @path /roles_admin/{userId}
     * @allow (get) Any authenticated user can check if they are an admin.
     * @allow (list) Listing admin roles is not permitted.
     * @allow (create, update, delete) Only admins can grant or revoke admin roles.
     * @deny (create, update, delete) Non-admin users cannot assign admin roles.
     * @principle Restricts admin role assignment to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}