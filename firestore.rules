/**
 * @fileOverview Firestore Security Rules for WikiStars5.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (profiles, notifications, streaks, achievements) and restricts write access to public data (public figures, achievements, related figures) to authorized administrators.
 * Read access to public data is generally open.
 *
 * Data Structure:
 * - /users/{userId}: User profile information. Only the user or an admin can access.
 * - /figures/{figureId}: Public figure profiles. Publicly readable, admin-writeable.
 * - /figures/{figureId}/comments/{commentId}: Comments on public figures. Accessible with figureId denormalized into the document.
 * - /users/{userId}/notifications/{notificationId}: User-specific notifications.
 * - /users/{userId}/streaks/{streakId}: User's commenting streaks.
 * - /achievements/{achievementId}: Master list of achievements. Publicly readable, admin-writeable.
 * - /users/{userId}/user_achievements/{userAchievementId}: Achievements unlocked by a user.
 * - /related_figures/{relatedFigureId}: Relationships between public figures.
 * - /roles_admin/{userId}: Admin role assignment.
 *
 * Key Security Decisions:
 * - Public listing of user profiles is disallowed.
 * - The existence of a document in /roles_admin/{userId} grants admin privileges.
 * - Data types and schema validation are not enforced in this prototyping phase, except for ownership and relational integrity checks.
 *
 * Denormalization for Authorization:
 * - Comments: The `publicFigureId` is denormalized into the comment document to allow rules on comments without requiring a `get()` on the parent figure.
 * - Streaks: The `publicFigureId` is denormalized into the streak document to allow rules on streaks without requiring a `get()` on the parent figure.
 *
 * Structural Segregation:
 * - Public figure data is stored in a top-level collection (`/figures`) to allow for public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the user or an admin can access their own profile.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - A user can read, update, or delete their own profile.
     * @deny (create, update, delete) - Another user attempts to create, update, or delete a profile using a different userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile if the userId matches their auth.uid
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to read, update, and delete their own profile
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing all users.
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages public figure profiles. Publicly readable, admin-writeable.
     * @path /figures/{figureId}
     * @allow (get, list) - Any user can read public figure profiles.
     * @deny (create, update, delete) - Only an admin can create, update, or delete public figure profiles.
     * @principle Restricts write access to public figure profiles to admins.
     */
    match /figures/{figureId} {
      // Allow public read access to figures
      allow get, list: if true;

      // Allow write only for admins (future implementation)
      allow create, update, delete: if false;
    }

    /**
     * @description Manages comments associated with a specific public figure.
     * @path /figures/{figureId}/comments/{commentId}
     * @allow (create) - Any authenticated user can create a comment under a public figure.
     * @allow (get, list) - Any user can read comments under a public figure.
     * @allow (update, delete) - Only the comment's author can update or delete it.
     * @deny (update, delete) - A user attempts to update or delete a comment they don't own.
     * @principle Enforces ownership for comment updates and deletions, allows public read access.
     */
    match /figures/{figureId}/comments/{commentId} {
      // Helper function to check if the user is signed in and owns the comment
      function isCommentOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow any authenticated user to create a comment
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Allow public read access to comments
      allow get, list: if true;

      // Allow the comment's author to update or delete it
      allow update: if isCommentOwner(resource.data.userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isCommentOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Manages user-specific notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) -  A server-side function can create a notification for a user.
     * @allow (get, list, update, delete) - A user can only access their own notifications.
     * @deny (create, update, delete) - A user attempts to access another user's notifications.
     * @principle Enforces path-based ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      // Reuse the isOwner function from the /users/{userId} match
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a server-side function to create a notification for a user
      allow create: if false; // Notifications are only created by a trusted server

      // Allow a user to read, update, and delete their own notifications
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages user-specific streaks.
     * @path /users/{userId}/streaks/{streakId}
     * @allow (create) - A server-side function can create a streak for a user.
     * @allow (get, list, update, delete) - A user can only access their own streaks.
     * @deny (create, update, delete) - A user attempts to access another user's streaks.
     * @principle Enforces path-based ownership for streaks.
     */
    match /users/{userId}/streaks/{streakId} {
      // Reuse the isOwner function from the /users/{userId} match
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a server-side function to create a streak for a user
      allow create: if false; // Streaks are only created by a trusted server

      // Allow a user to read, update, and delete their own streaks
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages the master list of achievements.
     * @path /achievements/{achievementId}
     * @allow (get, list) - Any user can read the list of achievements.
     * @deny (create, update, delete) - Only an admin can create, update, or delete achievements.
     * @principle Restricts write access to achievements to admins.
     */
    match /achievements/{achievementId} {
      // Allow public read access to achievements
      allow get, list: if true;

      // Allow write only for admins (future implementation)
      allow create, update, delete: if false;
    }

    /**
     * @description Manages the association between a user and an achievement.
     * @path /users/{userId}/user_achievements/{userAchievementId}
     * @allow (create) - A server-side function can create user achievement for a user.
     * @allow (get, list, update, delete) - A user can only access their own user achievements.
     * @deny (create, update, delete) - A user attempts to access another user's user achievements.
     * @principle Enforces path-based ownership for user achievements.
     */
    match /users/{userId}/user_achievements/{userAchievementId} {
      // Reuse the isOwner function from the /users/{userId} match
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a server-side function to create a user achievement for a user
      allow create: if false; // User Achievements are only created by a trusted server

      // Allow a user to read, update, and delete their own user achievements
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages relationships between public figures.
     * @path /related_figures/{relatedFigureId}
     * @allow (get, list) - Any user can read the relationships between public figures.
     * @deny (create, update, delete) - Only an admin can create, update, or delete relationships.
     * @principle Restricts write access to related figures to admins.
     */
    match /related_figures/{relatedFigureId} {
      // Allow public read access to related figures
      allow get, list: if true;

      // Allow write only for admins (future implementation)
      allow create, update, delete: if false;
    }

     /**
     * @description Checks if a user is an admin. The existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (read) - A user can check if they are an admin.
     * @deny (write) - Only the console can write to this collection.
     * @principle Existence-based check for admin privileges.
     */
    match /roles_admin/{userId} {
      // Allow a user to check if they are an admin
      allow get: if request.auth != null && request.auth.uid == userId;
      allow list: if false; //Do not allow listing of admins

      allow create, update, delete: if false; // Only console writes for now
    }
  }

  // Helper function to check if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}