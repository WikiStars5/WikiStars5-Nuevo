/**
 * @file Firestore Security Rules for WikiStars5
 * @version Prototyping Mode - Data shape is flexible, but authorization is strictly enforced.
 *
 * @Core Philosophy:
 *   This ruleset enforces a strict user-ownership model for user-specific data,
 *   restricts write access for public figure data to admins, and allows public
 *   read access to public figure and achievement data.  Admin privileges are
 *   granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * @Data Structure:
 *   - /users/{userId}: User profile data, owned by the user.
 *   - /figures/{figureId}: Public figure profiles, read-only for general users, write-only for admins.
 *   - /figures/{figureId}/comments/{commentId}: Comments on public figures, with 'publicFigureId' denormalized for authorization.
 *   - /users/{userId}/notifications/{notificationId}: User-specific notifications.
 *   - /users/{userId}/streaks/{streakId}: User's streak data, with 'publicFigureId' denormalized.
 *   - /achievements/{achievementId}: Master list of achievements, publicly readable.
 *   - /users/{userId}/user_achievements/{userAchievementId}: Achievements unlocked by a specific user.
 *   - /related_figures/{relatedFigureId}: Relationships between public figures.
 *   - /roles_admin/{userId}: Collection to grant admin privileges.  Existence of a document for a user ID grants admin rights.
 *
 * @Key Security Decisions:
 *   - User data is strictly controlled by the owning user.
 *   - Public figure data is publicly readable but only writable by admins.
 *   - Listing user-specific subcollections is allowed only for the owning user.
 *   - Admin status is determined by document existence in `/roles_admin/{userId}`.
 *
 * @Denormalization for Authorization:
 *   - The `Comment` entity includes a `publicFigureId` field, which is redundant given the path structure
 *     (/figures/{figureId}/comments/{commentId}). This denormalization is **intentional** and is done to
 *     ensure authorization independence; the rule for a comment does not need to perform a `get()` operation
 *     on the parent `/figures/{figureId}` document to validate which figure the comment belongs to.
 *   - The `Streak` entity includes a `publicFigureId` field.  This prevents the need to query the `figures` collection to validate relationship on `create`.
 *
 * @Structural Segregation:
 *   - Public figure data is stored in a top-level collection (`/figures`) to allow public read access.
 *   - User-specific data (e.g., notifications, streaks, user achievements) is stored under the `/users/{userId}` path to ensure private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @principle Verified Identity: All authorization decisions must rely on request.auth.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @principle Ownership: Enforces document ownership for user-specific data.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @principle Roles: Checks for admin privileges based on document existence in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @principle Robustness: Ensures the document exists before allowing updates or deletes.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching userId creates their profile.
     * @allow (get, update, delete) Signed-in user with matching userId accesses their profile.
     * @deny (create) Signed-in user attempts to create a profile for a different userId.
     * @deny (get, update, delete) Non-signed-in user attempts to access any profile.
     * @principle Ownership: Enforces strict user-ownership for user profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for public figure profiles.
     * @path /figures/{figureId}
     * @allow (get, list) Any user can read public figure profiles.
     * @allow (create, update, delete) Only admins can create, update, or delete public figure profiles.
     * @deny (create, update, delete) Non-admin users attempt to modify public figure profiles.
     * @principle Public Read with Owner-Only Writes: Allows public read access but restricts write access to admins.
     */
    match /figures/{figureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for comments on public figures.
     * @path /figures/{figureId}/comments/{commentId}
     * @allow (create) Signed-in user can create comments on public figures. 'publicFigureId' must match the figureId in the path.
     * @allow (get, list) Any user can read comments on public figures.
     * @allow (update, delete) Only the comment owner can update or delete their own comments.
     * @deny (create) Non-signed-in user attempts to create comments.
     * @deny (update, delete) Non-owner attempts to modify or delete comments.
     * @principle Ownership: Enforces comment ownership for updates and deletes.
     */
    match /figures/{figureId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.publicFigureId == figureId;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for user notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) Only the system itself can create notifications.
     * @allow (get, update, delete) Signed-in user with matching userId can access their notifications.
     * @allow (list) Signed-in user can list their own notifications.
     * @deny (create) Users cannot directly create notifications for themselves or others.
     * @deny (get, update, delete) Non-owner attempts to access notifications.
     * @principle Ownership: Enforces strict user-ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user streaks.
     * @path /users/{userId}/streaks/{streakId}
     * @allow (create) Signed-in user can create streaks with matching userId.
     * @allow (get, update, delete) Signed-in user with matching userId can access their streaks.
     * @allow (list) Signed-in user can list their own streaks.
     * @deny (create) Signed-in user attempts to create a streak for a different userId.
     * @deny (get, update, delete) Non-owner attempts to access streaks.
     * @principle Ownership: Enforces strict user-ownership for streaks.
     */
    match /users/{userId}/streaks/{streakId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.publicFigureId is string;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for achievements.
     * @path /achievements/{achievementId}
     * @allow (get, list) Any user can read the list of achievements.
     * @allow (create, update, delete) Only admins can create, update, or delete achievements.
     * @deny (create, update, delete) Non-admin users cannot modify the list of achievements.
     * @principle Public Read with Owner-Only Writes: Allows public read access but restricts write access to admins.
     */
    match /achievements/{achievementId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for user achievements.
     * @path /users/{userId}/user_achievements/{userAchievementId}
     * @allow (create) Signed-in user can create user achievements with matching userId.
     * @allow (get, update, delete) Signed-in user with matching userId can access their user achievements.
     * @allow (list) Signed-in user can list their own user achievements.
     * @deny (create) Signed-in user attempts to create a user achievement for a different userId.
     * @deny (get, update, delete) Non-owner attempts to access user achievements.
     * @principle Ownership: Enforces strict user-ownership for user achievements.
     */
    match /users/{userId}/user_achievements/{userAchievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for related figures.
     * @path /related_figures/{relatedFigureId}
     * @allow (get, list) Any user can read the related figures.
     * @allow (create, update, delete) Only admins can create, update, or delete related figures.
     * @deny (create, update, delete) Non-admin users cannot modify related figures.
     */
    match /related_figures/{relatedFigureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    /**
     * @description Rules to determine admin priviledges.
     * @path /roles_admin/{userId}
     * @allow (get, list) Admins can see the list of other admins.
     * @allow (create) Only Admins can grant admin priviledges.
     * @allow (delete) Only Admins can revoke admin priviledges.
     */
    match /roles_admin/{userId}{
       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if false;
       allow delete: if isAdmin();
    }
  }
}